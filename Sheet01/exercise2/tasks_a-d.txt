########################
# Solution to task (a) #
########################

show info about CPU:
cat /proc/cpuinfo 

One could use lscpu to display in a slightly nicer format.

########################
# Solution to task (b) #
########################

g++ -Q -march=native --target-help 
gcc -Q -march=native --help=target

Was ist der unterschied zu --target-help und --help=target?


########################
# Solution to task (c) #
########################

-m64:   Generate Code for 32-bit or 64-bit ABI  

-mavx   makes GCC use the VEX encoding instead of legacy SSE for every SIMD instruction

-mvzeroupper    This option instructs GCC to emit a "vzeroupper" instruction before a transfer of control flow out of the function to minimize the AVX
                to SSE transition penalty as well as remove unnecessary "zeroupper" intrinsics.

-mcx16  This option enables GCC to generate "CMPXCHG16B" instructions in 64-bit code to implement compare-and-exchange operations on 16-byte
        aligned 128-bit objects.

-msahf  This option enables generation of "SAHF" instructions in 64-bit code. In 64-bit mode, the "SAHF" instruction is used to optimize
        "fmod", "drem", and "remainder" built-in functions


########################
# Solution to task (d) #
########################

-march=native is a destructive flag. It makes the binary possible not compatible on a lot of hardware (basically any CPU that is not a direct descendent of the one used for compilation). 
Using -march=native enables all instruction subsets supported by the local machine (hence the result might not run on different machines)
Using -mtune=native produces code optimized for the local machine under the constraints of the selected instruction set. 
